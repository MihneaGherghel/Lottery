{
  "address": "0xE6789d7140aeF39c365C94b6CD06b3278b6eba07",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "subscriptionId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x49e127fe4a27fd47155e1c75276c766e87a9daa15c2c7eb7f96a482105507079",
  "receipt": {
    "to": null,
    "from": "0x1b7D5D933b21F3172D11415A0e2B08b2DA35DF5f",
    "contractAddress": "0xE6789d7140aeF39c365C94b6CD06b3278b6eba07",
    "transactionIndex": 52,
    "gasUsed": "1286416",
    "logsBloom": "0x
    "blockHash": "0x93b022af2d793550e5fde80d5a78d22114f6a9091c366940abd9afe25250f2d8",
    "transactionHash": "0x49e127fe4a27fd47155e1c75276c766e87a9daa15c2c7eb7f96a482105507079",
    "logs": [],
    "blockNumber": 5862234,
    "cumulativeGasUsed": "6180968",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "10000000000000000",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "77581474838967428897021015815053359577082931689270798495550685029233854948510",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "e2d9a65483c9ceac1a9b2fe883a46e00",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"subscriptionId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/ChainSpecificUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {ArbSys} from \\\"./vendor/@arbitrum/nitro-contracts/src/precompiles/ArbSys.sol\\\";\\nimport {ArbGasInfo} from \\\"./vendor/@arbitrum/nitro-contracts/src/precompiles/ArbGasInfo.sol\\\";\\n\\n//@dev A library that abstracts out opcodes that behave differently across chains.\\n//@dev The methods below return values that are pertinent to the given chain.\\n//@dev For instance, ChainSpecificUtil.getBlockNumber() returns L2 block number in L2 chains\\nlibrary ChainSpecificUtil {\\n  address private constant ARBSYS_ADDR = address(0x0000000000000000000000000000000000000064);\\n  ArbSys private constant ARBSYS = ArbSys(ARBSYS_ADDR);\\n  address private constant ARBGAS_ADDR = address(0x000000000000000000000000000000000000006C);\\n  ArbGasInfo private constant ARBGAS = ArbGasInfo(ARBGAS_ADDR);\\n  uint256 private constant ARB_MAINNET_CHAIN_ID = 42161;\\n  uint256 private constant ARB_GOERLI_TESTNET_CHAIN_ID = 421613;\\n  uint256 private constant ARB_SEPOLIA_TESTNET_CHAIN_ID = 421614;\\n\\n  function getBlockhash(uint64 blockNumber) internal view returns (bytes32) {\\n    uint256 chainid = block.chainid;\\n    if (\\n      chainid == ARB_MAINNET_CHAIN_ID ||\\n      chainid == ARB_GOERLI_TESTNET_CHAIN_ID ||\\n      chainid == ARB_SEPOLIA_TESTNET_CHAIN_ID\\n    ) {\\n      if ((getBlockNumber() - blockNumber) > 256 || blockNumber >= getBlockNumber()) {\\n        return \\\"\\\";\\n      }\\n      return ARBSYS.arbBlockHash(blockNumber);\\n    }\\n    return blockhash(blockNumber);\\n  }\\n\\n  function getBlockNumber() internal view returns (uint256) {\\n    uint256 chainid = block.chainid;\\n    if (chainid == ARB_MAINNET_CHAIN_ID || chainid == ARB_GOERLI_TESTNET_CHAIN_ID) {\\n      return ARBSYS.arbBlockNumber();\\n    }\\n    return block.number;\\n  }\\n\\n  function getCurrentTxL1GasFees() internal view returns (uint256) {\\n    uint256 chainid = block.chainid;\\n    if (chainid == ARB_MAINNET_CHAIN_ID || chainid == ARB_GOERLI_TESTNET_CHAIN_ID) {\\n      return ARBGAS.getCurrentTxL1GasFees();\\n    }\\n    return 0;\\n  }\\n\\n  /**\\n   * @notice Returns the gas cost in wei of calldataSizeBytes of calldata being posted\\n   * @notice to L1.\\n   */\\n  function getL1CalldataGasCost(uint256 calldataSizeBytes) internal view returns (uint256) {\\n    uint256 chainid = block.chainid;\\n    if (chainid == ARB_MAINNET_CHAIN_ID || chainid == ARB_GOERLI_TESTNET_CHAIN_ID) {\\n      (, uint256 l1PricePerByte, , , , ) = ARBGAS.getPricesInWei();\\n      // see https://developer.arbitrum.io/devs-how-tos/how-to-estimate-gas#where-do-we-get-all-this-information-from\\n      // for the justification behind the 140 number.\\n      return l1PricePerByte * (calldataSizeBytes + 140);\\n    }\\n    return 0;\\n  }\\n}\\n\",\"keccak256\":\"0x5a544649bb97cde531acc7bdb25a6c4b5f4f6bcbd592b57c4e2de201c251bcd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatible directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatible as KeeperCompatible} from \\\"./AutomationCompatible.sol\\\";\\nimport {AutomationBase as KeeperBase} from \\\"./AutomationBase.sol\\\";\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xa5f26a85ab9a927016e27af9f1ec33f878c28d8f06cb611e7fb2e189a5336a43\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/BlockhashStoreInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface BlockhashStoreInterface {\\n  function getBlockhash(uint256 number) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0d39e3be84000b35faa198e8c4fcc1cfd65a876275c776f45b4e0d48c852b4cc\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/TypeAndVersionInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract TypeAndVersionInterface {\\n  function typeAndVersion() external pure virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0x805cc9a91d54db1bea60cb19f38364f1eac2735bddb3476294fb803c2f6b7097\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x215529a99534a40e6257ef2282a91ea4a95b66debc3997866406907622efb405\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IERC677Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC677Receiver {\\n  function onTokenTransfer(address sender, uint256 amount, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x5f9ee31598e2250815033c2f4e1e7e747f917815378938505063df1d4ae603ec\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xac02fbc0c7d194e525a71f524d1f7c472df73e19c2b527d7b529badaeaf0ec51\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@arbitrum/nitro-contracts/src/precompiles/ArbGasInfo.sol\":{\"content\":\"// Copyright 2021-2022, Offchain Labs, Inc.\\n// For license information, see https://github.com/nitro/blob/master/LICENSE\\n// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.4.21 <0.9.0;\\n\\ninterface ArbGasInfo {\\n    // return gas prices in wei, assuming the specified aggregator is used\\n    //        (\\n    //            per L2 tx,\\n    //            per L1 calldata unit, (zero byte = 4 units, nonzero byte = 16 units)\\n    //            per storage allocation,\\n    //            per ArbGas base,\\n    //            per ArbGas congestion,\\n    //            per ArbGas total\\n    //        )\\n    function getPricesInWeiWithAggregator(address aggregator) external view returns (uint, uint, uint, uint, uint, uint);\\n\\n    // return gas prices in wei, as described above, assuming the caller's preferred aggregator is used\\n    //     if the caller hasn't specified a preferred aggregator, the default aggregator is assumed\\n    function getPricesInWei() external view returns (uint, uint, uint, uint, uint, uint);\\n\\n    // return prices in ArbGas (per L2 tx, per L1 calldata unit, per storage allocation),\\n    //       assuming the specified aggregator is used\\n    function getPricesInArbGasWithAggregator(address aggregator) external view returns (uint, uint, uint);\\n\\n    // return gas prices in ArbGas, as described above, assuming the caller's preferred aggregator is used\\n    //     if the caller hasn't specified a preferred aggregator, the default aggregator is assumed\\n    function getPricesInArbGas() external view returns (uint, uint, uint);\\n\\n    // return gas accounting parameters (speedLimitPerSecond, gasPoolMax, maxTxGasLimit)\\n    function getGasAccountingParams() external view returns (uint, uint, uint);\\n\\n    // get ArbOS's estimate of the L1 gas price in wei\\n    function getL1GasPriceEstimate() external view returns(uint);\\n\\n    // set ArbOS's estimate of the L1 gas price in wei\\n    // reverts unless called by chain owner or designated gas oracle (if any)\\n    function setL1GasPriceEstimate(uint priceInWei) external;\\n\\n    // get L1 gas fees paid by the current transaction (txBaseFeeWei, calldataFeeWei)\\n    function getCurrentTxL1GasFees() external view returns(uint);\\n}\\n\",\"keccak256\":\"0x70607287132cc13f599a31a2eb679f4259f86429ea2fdf4f8f02be3044f6db5a\",\"license\":\"BUSL-1.1\"},\"@chainlink/contracts/src/v0.8/vendor/@arbitrum/nitro-contracts/src/precompiles/ArbSys.sol\":{\"content\":\"// Copyright 2021-2022, Offchain Labs, Inc.\\n// For license information, see https://github.com/nitro/blob/master/LICENSE\\n// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title System level functionality\\n * @notice For use by contracts to interact with core L2-specific functionality.\\n * Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064.\\n */\\ninterface ArbSys {\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint256);\\n\\n    /**\\n     * @notice Get Arbitrum block hash (reverts unless currentBlockNum-256 <= arbBlockNum < currentBlockNum)\\n     * @return block hash\\n     */\\n    function arbBlockHash(uint256 arbBlockNum) external view returns (bytes32);\\n\\n    /**\\n     * @notice Gets the rollup's unique chain identifier\\n     * @return Chain identifier as int\\n     */\\n    function arbChainID() external view returns (uint256);\\n\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns 0 since Nitro has no concept of storage gas\\n     * @return uint 0\\n     */\\n    function getStorageGasAvailable() external view returns (uint256);\\n\\n    /**\\n     * @notice (deprecated) check if current call is top level (meaning it was triggered by an EoA or a L1 contract)\\n     * @dev this call has been deprecated and may be removed in a future release\\n     * @return true if current execution frame is not a call by another L2 contract\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param unused argument no longer used\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address unused)\\n        external\\n        pure\\n        returns (address);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty data.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @dev it is not possible to execute on the L1 any L2-to-L1 transaction which contains data\\n     * to a contract address without any code (as enforced by the Bridge contract).\\n     * @param destination recipient address on L1\\n     * @param data (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata data)\\n        external\\n        payable\\n        returns (uint256);\\n\\n    /**\\n     * @notice Get send Merkle tree state\\n     * @return size number of sends in the history\\n     * @return root root hash of the send history\\n     * @return partials hashes of partial subtrees in the send history tree\\n     */\\n    function sendMerkleTreeState()\\n        external\\n        view\\n        returns (\\n            uint256 size,\\n            bytes32 root,\\n            bytes32[] memory partials\\n        );\\n\\n    /**\\n     * @notice creates a send txn from L2 to L1\\n     * @param position = (level << 192) + leaf = (0 << 192) + leaf = leaf\\n     */\\n    event L2ToL1Tx(\\n        address caller,\\n        address indexed destination,\\n        uint256 indexed hash,\\n        uint256 indexed position,\\n        uint256 arbBlockNum,\\n        uint256 ethBlockNum,\\n        uint256 timestamp,\\n        uint256 callvalue,\\n        bytes data\\n    );\\n\\n    /// @dev DEPRECATED in favour of the new L2ToL1Tx event above after the nitro upgrade\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint256 indexed uniqueId,\\n        uint256 indexed batchNumber,\\n        uint256 indexInBatch,\\n        uint256 arbBlockNum,\\n        uint256 ethBlockNum,\\n        uint256 timestamp,\\n        uint256 callvalue,\\n        bytes data\\n    );\\n\\n    /**\\n     * @notice logs a merkle branch for proof synthesis\\n     * @param reserved an index meant only to align the 4th index with L2ToL1Transaction's 4th event\\n     * @param hash the merkle hash\\n     * @param position = (level << 192) + leaf\\n     */\\n    event SendMerkleUpdate(\\n        uint256 indexed reserved,\\n        bytes32 indexed hash,\\n        uint256 indexed position\\n    );\\n}\\n\",\"keccak256\":\"0xa8461b373712cb0f4950ef9cad1d12fb38442da76cd57ff916baa7920f7b5077\",\"license\":\"BUSL-1.1\"},\"@chainlink/contracts/src/v0.8/vrf/VRF.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n  * @notice Verification of verifiable-random-function (VRF) proofs, following\\n  * @notice https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\\n  * @notice See https://eprint.iacr.org/2017/099.pdf for security proofs.\\n\\n  * @dev Bibliographic references:\\n\\n  * @dev Goldberg, et al., \\\"Verifiable Random Functions (VRFs)\\\", Internet Draft\\n  * @dev draft-irtf-cfrg-vrf-05, IETF, Aug 11 2019,\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05\\n\\n  * @dev Papadopoulos, et al., \\\"Making NSEC5 Practical for DNSSEC\\\", Cryptology\\n  * @dev ePrint Archive, Report 2017/099, https://eprint.iacr.org/2017/099.pdf\\n  * ****************************************************************************\\n  * @dev USAGE\\n\\n  * @dev The main entry point is randomValueFromVRFProof. See its docstring.\\n  * ****************************************************************************\\n  * @dev PURPOSE\\n\\n  * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n  * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n  * @dev making his output up to suit himself. Reggie provides Vera a public key\\n  * @dev to which he knows the secret key. Each time Vera provides a seed to\\n  * @dev Reggie, he gives back a value which is computed completely\\n  * @dev deterministically from the seed and the secret key.\\n\\n  * @dev Reggie provides a proof by which Vera can verify that the output was\\n  * @dev correctly computed once Reggie tells it to her, but without that proof,\\n  * @dev the output is computationally indistinguishable to her from a uniform\\n  * @dev random sample from the output space.\\n\\n  * @dev The purpose of this contract is to perform that verification.\\n  * ****************************************************************************\\n  * @dev DESIGN NOTES\\n\\n  * @dev The VRF algorithm verified here satisfies the full uniqueness, full\\n  * @dev collision resistance, and full pseudo-randomness security properties.\\n  * @dev See \\\"SECURITY PROPERTIES\\\" below, and\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-3\\n\\n  * @dev An elliptic curve point is generally represented in the solidity code\\n  * @dev as a uint256[2], corresponding to its affine coordinates in\\n  * @dev GF(FIELD_SIZE).\\n\\n  * @dev For the sake of efficiency, this implementation deviates from the spec\\n  * @dev in some minor ways:\\n\\n  * @dev - Keccak hash rather than the SHA256 hash recommended in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\\n  * @dev   Keccak costs much less gas on the EVM, and provides similar security.\\n\\n  * @dev - Secp256k1 curve instead of the P-256 or ED25519 curves recommended in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5\\n  * @dev   For curve-point multiplication, it's much cheaper to abuse ECRECOVER\\n\\n  * @dev - hashToCurve recursively hashes until it finds a curve x-ordinate. On\\n  * @dev   the EVM, this is slightly more efficient than the recommendation in\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\\n  * @dev   step 5, to concatenate with a nonce then hash, and rehash with the\\n  * @dev   nonce updated until a valid x-ordinate is found.\\n\\n  * @dev - hashToCurve does not include a cipher version string or the byte 0x1\\n  * @dev   in the hash message, as recommended in step 5.B of the draft\\n  * @dev   standard. They are unnecessary here because no variation in the\\n  * @dev   cipher suite is allowed.\\n\\n  * @dev - Similarly, the hash input in scalarFromCurvePoints does not include a\\n  * @dev   commitment to the cipher suite, either, which differs from step 2 of\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\\n  * @dev   . Also, the hash input is the concatenation of the uncompressed\\n  * @dev   points, not the compressed points as recommended in step 3.\\n\\n  * @dev - In the calculation of the challenge value \\\"c\\\", the \\\"u\\\" value (i.e.\\n  * @dev   the value computed by Reggie as the nonce times the secp256k1\\n  * @dev   generator point, see steps 5 and 7 of\\n  * @dev   https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.3\\n  * @dev   ) is replaced by its ethereum address, i.e. the lower 160 bits of the\\n  * @dev   keccak hash of the original u. This is because we only verify the\\n  * @dev   calculation of u up to its address, by abusing ECRECOVER.\\n  * ****************************************************************************\\n  * @dev   SECURITY PROPERTIES\\n\\n  * @dev Here are the security properties for this VRF:\\n\\n  * @dev Full uniqueness: For any seed and valid VRF public key, there is\\n  * @dev   exactly one VRF output which can be proved to come from that seed, in\\n  * @dev   the sense that the proof will pass verifyVRFProof.\\n\\n  * @dev Full collision resistance: It's cryptographically infeasible to find\\n  * @dev   two seeds with same VRF output from a fixed, valid VRF key\\n\\n  * @dev Full pseudorandomness: Absent the proofs that the VRF outputs are\\n  * @dev   derived from a given seed, the outputs are computationally\\n  * @dev   indistinguishable from randomness.\\n\\n  * @dev https://eprint.iacr.org/2017/099.pdf, Appendix B contains the proofs\\n  * @dev for these properties.\\n\\n  * @dev For secp256k1, the key validation described in section\\n  * @dev https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.6\\n  * @dev is unnecessary, because secp256k1 has cofactor 1, and the\\n  * @dev representation of the public key used here (affine x- and y-ordinates\\n  * @dev of the secp256k1 point on the standard y^2=x^3+7 curve) cannot refer to\\n  * @dev the point at infinity.\\n  * ****************************************************************************\\n  * @dev OTHER SECURITY CONSIDERATIONS\\n  *\\n  * @dev The seed input to the VRF could in principle force an arbitrary amount\\n  * @dev of work in hashToCurve, by requiring extra rounds of hashing and\\n  * @dev checking whether that's yielded the x ordinate of a secp256k1 point.\\n  * @dev However, under the Random Oracle Model the probability of choosing a\\n  * @dev point which forces n extra rounds in hashToCurve is 2\\u207b\\u207f. The base cost\\n  * @dev for calling hashToCurve is about 25,000 gas, and each round of checking\\n  * @dev for a valid x ordinate costs about 15,555 gas, so to find a seed for\\n  * @dev which hashToCurve would cost more than 2,017,000 gas, one would have to\\n  * @dev try, in expectation, about 2\\u00b9\\u00b2\\u2078 seeds, which is infeasible for any\\n  * @dev foreseeable computational resources. (25,000 + 128 * 15,555 < 2,017,000.)\\n\\n  * @dev Since the gas block limit for the Ethereum main net is 10,000,000 gas,\\n  * @dev this means it is infeasible for an adversary to prevent correct\\n  * @dev operation of this contract by choosing an adverse seed.\\n\\n  * @dev (See TestMeasureHashToCurveGasCost for verification of the gas cost for\\n  * @dev hashToCurve.)\\n\\n  * @dev It may be possible to make a secure constant-time hashToCurve function.\\n  * @dev See notes in hashToCurve docstring.\\n*/\\ncontract VRF {\\n  // See https://www.secg.org/sec2-v2.pdf, section 2.4.1, for these constants.\\n  // Number of points in Secp256k1\\n  uint256 private constant GROUP_ORDER = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141;\\n  // Prime characteristic of the galois field over which Secp256k1 is defined\\n  uint256 private constant FIELD_SIZE =\\n    // solium-disable-next-line indentation\\n    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F;\\n  uint256 private constant WORD_LENGTH_BYTES = 0x20;\\n\\n  // (base^exponent) % FIELD_SIZE\\n  // Cribbed from https://medium.com/@rbkhmrcr/precompiles-solidity-e5d29bd428c4\\n  function bigModExp(uint256 base, uint256 exponent) internal view returns (uint256 exponentiation) {\\n    uint256 callResult;\\n    uint256[6] memory bigModExpContractInputs;\\n    bigModExpContractInputs[0] = WORD_LENGTH_BYTES; // Length of base\\n    bigModExpContractInputs[1] = WORD_LENGTH_BYTES; // Length of exponent\\n    bigModExpContractInputs[2] = WORD_LENGTH_BYTES; // Length of modulus\\n    bigModExpContractInputs[3] = base;\\n    bigModExpContractInputs[4] = exponent;\\n    bigModExpContractInputs[5] = FIELD_SIZE;\\n    uint256[1] memory output;\\n    assembly {\\n      // solhint-disable-line no-inline-assembly\\n      callResult := staticcall(\\n        not(0), // Gas cost: no limit\\n        0x05, // Bigmodexp contract address\\n        bigModExpContractInputs,\\n        0xc0, // Length of input segment: 6*0x20-bytes\\n        output,\\n        0x20 // Length of output segment\\n      )\\n    }\\n    if (callResult == 0) {\\n      revert(\\\"bigModExp failure!\\\");\\n    }\\n    return output[0];\\n  }\\n\\n  // Let q=FIELD_SIZE. q % 4 = 3, \\u2234 x\\u2261r^2 mod q \\u21d2 x^SQRT_POWER\\u2261\\u00b1r mod q.  See\\n  // https://en.wikipedia.org/wiki/Modular_square_root#Prime_or_prime_power_modulus\\n  uint256 private constant SQRT_POWER = (FIELD_SIZE + 1) >> 2;\\n\\n  // Computes a s.t. a^2 = x in the field. Assumes a exists\\n  function squareRoot(uint256 x) internal view returns (uint256) {\\n    return bigModExp(x, SQRT_POWER);\\n  }\\n\\n  // The value of y^2 given that (x,y) is on secp256k1.\\n  function ySquared(uint256 x) internal pure returns (uint256) {\\n    // Curve is y^2=x^3+7. See section 2.4.1 of https://www.secg.org/sec2-v2.pdf\\n    uint256 xCubed = mulmod(x, mulmod(x, x, FIELD_SIZE), FIELD_SIZE);\\n    return addmod(xCubed, 7, FIELD_SIZE);\\n  }\\n\\n  // True iff p is on secp256k1\\n  function isOnCurve(uint256[2] memory p) internal pure returns (bool) {\\n    // Section 2.3.6. in https://www.secg.org/sec1-v2.pdf\\n    // requires each ordinate to be in [0, ..., FIELD_SIZE-1]\\n    require(p[0] < FIELD_SIZE, \\\"invalid x-ordinate\\\");\\n    require(p[1] < FIELD_SIZE, \\\"invalid y-ordinate\\\");\\n    return ySquared(p[0]) == mulmod(p[1], p[1], FIELD_SIZE);\\n  }\\n\\n  // Hash x uniformly into {0, ..., FIELD_SIZE-1}.\\n  function fieldHash(bytes memory b) internal pure returns (uint256 x_) {\\n    x_ = uint256(keccak256(b));\\n    // Rejecting if x >= FIELD_SIZE corresponds to step 2.1 in section 2.3.4 of\\n    // http://www.secg.org/sec1-v2.pdf , which is part of the definition of\\n    // string_to_point in the IETF draft\\n    while (x_ >= FIELD_SIZE) {\\n      x_ = uint256(keccak256(abi.encodePacked(x_)));\\n    }\\n  }\\n\\n  // Hash b to a random point which hopefully lies on secp256k1. The y ordinate\\n  // is always even, due to\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.1.1\\n  // step 5.C, which references arbitrary_string_to_point, defined in\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.5 as\\n  // returning the point with given x ordinate, and even y ordinate.\\n  function newCandidateSecp256k1Point(bytes memory b) internal view returns (uint256[2] memory p) {\\n    unchecked {\\n      p[0] = fieldHash(b);\\n      p[1] = squareRoot(ySquared(p[0]));\\n      if (p[1] % 2 == 1) {\\n        // Note that 0 <= p[1] < FIELD_SIZE\\n        // so this cannot wrap, we use unchecked to save gas.\\n        p[1] = FIELD_SIZE - p[1];\\n      }\\n    }\\n  }\\n\\n  // Domain-separation tag for initial hash in hashToCurve. Corresponds to\\n  // vrf.go/hashToCurveHashPrefix\\n  uint256 internal constant HASH_TO_CURVE_HASH_PREFIX = 1;\\n\\n  // Cryptographic hash function onto the curve.\\n  //\\n  // Corresponds to algorithm in section 5.4.1.1 of the draft standard. (But see\\n  // DESIGN NOTES above for slight differences.)\\n  //\\n  // TODO(alx): Implement a bounded-computation hash-to-curve, as described in\\n  // \\\"Construction of Rational Points on Elliptic Curves over Finite Fields\\\"\\n  // http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.831.5299&rep=rep1&type=pdf\\n  // and suggested by\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-hash-to-curve-01#section-5.2.2\\n  // (Though we can't used exactly that because secp256k1's j-invariant is 0.)\\n  //\\n  // This would greatly simplify the analysis in \\\"OTHER SECURITY CONSIDERATIONS\\\"\\n  // https://www.pivotaltracker.com/story/show/171120900\\n  function hashToCurve(uint256[2] memory pk, uint256 input) internal view returns (uint256[2] memory rv) {\\n    rv = newCandidateSecp256k1Point(abi.encodePacked(HASH_TO_CURVE_HASH_PREFIX, pk, input));\\n    while (!isOnCurve(rv)) {\\n      rv = newCandidateSecp256k1Point(abi.encodePacked(rv[0]));\\n    }\\n  }\\n\\n  /** *********************************************************************\\n   * @notice Check that product==scalar*multiplicand\\n   *\\n   * @dev Based on Vitalik Buterin's idea in ethresear.ch post cited below.\\n   *\\n   * @param multiplicand: secp256k1 point\\n   * @param scalar: non-zero GF(GROUP_ORDER) scalar\\n   * @param product: secp256k1 expected to be multiplier * multiplicand\\n   * @return verifies true iff product==scalar*multiplicand, with cryptographically high probability\\n   */\\n  function ecmulVerify(\\n    uint256[2] memory multiplicand,\\n    uint256 scalar,\\n    uint256[2] memory product\\n  ) internal pure returns (bool verifies) {\\n    require(scalar != 0, \\\"zero scalar\\\"); // Rules out an ecrecover failure case\\n    uint256 x = multiplicand[0]; // x ordinate of multiplicand\\n    uint8 v = multiplicand[1] % 2 == 0 ? 27 : 28; // parity of y ordinate\\n    // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n    // Point corresponding to address ecrecover(0, v, x, s=scalar*x) is\\n    // (x\\u207b\\u00b9 mod GROUP_ORDER) * (scalar * x * multiplicand - 0 * g), i.e.\\n    // scalar*multiplicand. See https://crypto.stackexchange.com/a/18106\\n    bytes32 scalarTimesX = bytes32(mulmod(scalar, x, GROUP_ORDER));\\n    address actual = ecrecover(bytes32(0), v, bytes32(x), scalarTimesX);\\n    // Explicit conversion to address takes bottom 160 bits\\n    address expected = address(uint160(uint256(keccak256(abi.encodePacked(product)))));\\n    return (actual == expected);\\n  }\\n\\n  // Returns x1/z1-x2/z2=(x1z2-x2z1)/(z1z2) in projective coordinates on P\\u00b9(\\ud835\\udd3d\\u2099)\\n  function projectiveSub(\\n    uint256 x1,\\n    uint256 z1,\\n    uint256 x2,\\n    uint256 z2\\n  ) internal pure returns (uint256 x3, uint256 z3) {\\n    unchecked {\\n      uint256 num1 = mulmod(z2, x1, FIELD_SIZE);\\n      // Note this cannot wrap since x2 is a point in [0, FIELD_SIZE-1]\\n      // we use unchecked to save gas.\\n      uint256 num2 = mulmod(FIELD_SIZE - x2, z1, FIELD_SIZE);\\n      (x3, z3) = (addmod(num1, num2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\\n    }\\n  }\\n\\n  // Returns x1/z1*x2/z2=(x1x2)/(z1z2), in projective coordinates on P\\u00b9(\\ud835\\udd3d\\u2099)\\n  function projectiveMul(\\n    uint256 x1,\\n    uint256 z1,\\n    uint256 x2,\\n    uint256 z2\\n  ) internal pure returns (uint256 x3, uint256 z3) {\\n    (x3, z3) = (mulmod(x1, x2, FIELD_SIZE), mulmod(z1, z2, FIELD_SIZE));\\n  }\\n\\n  /** **************************************************************************\\n        @notice Computes elliptic-curve sum, in projective co-ordinates\\n\\n        @dev Using projective coordinates avoids costly divisions\\n\\n        @dev To use this with p and q in affine coordinates, call\\n        @dev projectiveECAdd(px, py, qx, qy). This will return\\n        @dev the addition of (px, py, 1) and (qx, qy, 1), in the\\n        @dev secp256k1 group.\\n\\n        @dev This can be used to calculate the z which is the inverse to zInv\\n        @dev in isValidVRFOutput. But consider using a faster\\n        @dev re-implementation such as ProjectiveECAdd in the golang vrf package.\\n\\n        @dev This function assumes [px,py,1],[qx,qy,1] are valid projective\\n             coordinates of secp256k1 points. That is safe in this contract,\\n             because this method is only used by linearCombination, which checks\\n             points are on the curve via ecrecover.\\n        **************************************************************************\\n        @param px The first affine coordinate of the first summand\\n        @param py The second affine coordinate of the first summand\\n        @param qx The first affine coordinate of the second summand\\n        @param qy The second affine coordinate of the second summand\\n\\n        (px,py) and (qx,qy) must be distinct, valid secp256k1 points.\\n        **************************************************************************\\n        Return values are projective coordinates of [px,py,1]+[qx,qy,1] as points\\n        on secp256k1, in P\\u00b2(\\ud835\\udd3d\\u2099)\\n        @return sx\\n        @return sy\\n        @return sz\\n    */\\n  function projectiveECAdd(\\n    uint256 px,\\n    uint256 py,\\n    uint256 qx,\\n    uint256 qy\\n  ) internal pure returns (uint256 sx, uint256 sy, uint256 sz) {\\n    unchecked {\\n      // See \\\"Group law for E/K : y^2 = x^3 + ax + b\\\", in section 3.1.2, p. 80,\\n      // \\\"Guide to Elliptic Curve Cryptography\\\" by Hankerson, Menezes and Vanstone\\n      // We take the equations there for (sx,sy), and homogenize them to\\n      // projective coordinates. That way, no inverses are required, here, and we\\n      // only need the one inverse in affineECAdd.\\n\\n      // We only need the \\\"point addition\\\" equations from Hankerson et al. Can\\n      // skip the \\\"point doubling\\\" equations because p1 == p2 is cryptographically\\n      // impossible, and required not to be the case in linearCombination.\\n\\n      // Add extra \\\"projective coordinate\\\" to the two points\\n      (uint256 z1, uint256 z2) = (1, 1);\\n\\n      // (lx, lz) = (qy-py)/(qx-px), i.e., gradient of secant line.\\n      // Cannot wrap since px and py are in [0, FIELD_SIZE-1]\\n      uint256 lx = addmod(qy, FIELD_SIZE - py, FIELD_SIZE);\\n      uint256 lz = addmod(qx, FIELD_SIZE - px, FIELD_SIZE);\\n\\n      uint256 dx; // Accumulates denominator from sx calculation\\n      // sx=((qy-py)/(qx-px))^2-px-qx\\n      (sx, dx) = projectiveMul(lx, lz, lx, lz); // ((qy-py)/(qx-px))^2\\n      (sx, dx) = projectiveSub(sx, dx, px, z1); // ((qy-py)/(qx-px))^2-px\\n      (sx, dx) = projectiveSub(sx, dx, qx, z2); // ((qy-py)/(qx-px))^2-px-qx\\n\\n      uint256 dy; // Accumulates denominator from sy calculation\\n      // sy=((qy-py)/(qx-px))(px-sx)-py\\n      (sy, dy) = projectiveSub(px, z1, sx, dx); // px-sx\\n      (sy, dy) = projectiveMul(sy, dy, lx, lz); // ((qy-py)/(qx-px))(px-sx)\\n      (sy, dy) = projectiveSub(sy, dy, py, z1); // ((qy-py)/(qx-px))(px-sx)-py\\n\\n      if (dx != dy) {\\n        // Cross-multiply to put everything over a common denominator\\n        sx = mulmod(sx, dy, FIELD_SIZE);\\n        sy = mulmod(sy, dx, FIELD_SIZE);\\n        sz = mulmod(dx, dy, FIELD_SIZE);\\n      } else {\\n        // Already over a common denominator, use that for z ordinate\\n        sz = dx;\\n      }\\n    }\\n  }\\n\\n  // p1+p2, as affine points on secp256k1.\\n  //\\n  // invZ must be the inverse of the z returned by projectiveECAdd(p1, p2).\\n  // It is computed off-chain to save gas.\\n  //\\n  // p1 and p2 must be distinct, because projectiveECAdd doesn't handle\\n  // point doubling.\\n  function affineECAdd(\\n    uint256[2] memory p1,\\n    uint256[2] memory p2,\\n    uint256 invZ\\n  ) internal pure returns (uint256[2] memory) {\\n    uint256 x;\\n    uint256 y;\\n    uint256 z;\\n    (x, y, z) = projectiveECAdd(p1[0], p1[1], p2[0], p2[1]);\\n    require(mulmod(z, invZ, FIELD_SIZE) == 1, \\\"invZ must be inverse of z\\\");\\n    // Clear the z ordinate of the projective representation by dividing through\\n    // by it, to obtain the affine representation\\n    return [mulmod(x, invZ, FIELD_SIZE), mulmod(y, invZ, FIELD_SIZE)];\\n  }\\n\\n  // True iff address(c*p+s*g) == lcWitness, where g is generator. (With\\n  // cryptographically high probability.)\\n  function verifyLinearCombinationWithGenerator(\\n    uint256 c,\\n    uint256[2] memory p,\\n    uint256 s,\\n    address lcWitness\\n  ) internal pure returns (bool) {\\n    // Rule out ecrecover failure modes which return address 0.\\n    unchecked {\\n      require(lcWitness != address(0), \\\"bad witness\\\");\\n      uint8 v = (p[1] % 2 == 0) ? 27 : 28; // parity of y-ordinate of p\\n      // Note this cannot wrap (X - Y % X), but we use unchecked to save\\n      // gas.\\n      bytes32 pseudoHash = bytes32(GROUP_ORDER - mulmod(p[0], s, GROUP_ORDER)); // -s*p[0]\\n      bytes32 pseudoSignature = bytes32(mulmod(c, p[0], GROUP_ORDER)); // c*p[0]\\n      // https://ethresear.ch/t/you-can-kinda-abuse-ecrecover-to-do-ecmul-in-secp256k1-today/2384/9\\n      // The point corresponding to the address returned by\\n      // ecrecover(-s*p[0],v,p[0],c*p[0]) is\\n      // (p[0]\\u207b\\u00b9 mod GROUP_ORDER)*(c*p[0]-(-s)*p[0]*g)=c*p+s*g.\\n      // See https://crypto.stackexchange.com/a/18106\\n      // https://bitcoin.stackexchange.com/questions/38351/ecdsa-v-r-s-what-is-v\\n      address computed = ecrecover(pseudoHash, v, bytes32(p[0]), pseudoSignature);\\n      return computed == lcWitness;\\n    }\\n  }\\n\\n  // c*p1 + s*p2. Requires cp1Witness=c*p1 and sp2Witness=s*p2. Also\\n  // requires cp1Witness != sp2Witness (which is fine for this application,\\n  // since it is cryptographically impossible for them to be equal. In the\\n  // (cryptographically impossible) case that a prover accidentally derives\\n  // a proof with equal c*p1 and s*p2, they should retry with a different\\n  // proof nonce.) Assumes that all points are on secp256k1\\n  // (which is checked in verifyVRFProof below.)\\n  function linearCombination(\\n    uint256 c,\\n    uint256[2] memory p1,\\n    uint256[2] memory cp1Witness,\\n    uint256 s,\\n    uint256[2] memory p2,\\n    uint256[2] memory sp2Witness,\\n    uint256 zInv\\n  ) internal pure returns (uint256[2] memory) {\\n    unchecked {\\n      // Note we are relying on the wrap around here\\n      require((cp1Witness[0] % FIELD_SIZE) != (sp2Witness[0] % FIELD_SIZE), \\\"points in sum must be distinct\\\");\\n      require(ecmulVerify(p1, c, cp1Witness), \\\"First mul check failed\\\");\\n      require(ecmulVerify(p2, s, sp2Witness), \\\"Second mul check failed\\\");\\n      return affineECAdd(cp1Witness, sp2Witness, zInv);\\n    }\\n  }\\n\\n  // Domain-separation tag for the hash taken in scalarFromCurvePoints.\\n  // Corresponds to scalarFromCurveHashPrefix in vrf.go\\n  uint256 internal constant SCALAR_FROM_CURVE_POINTS_HASH_PREFIX = 2;\\n\\n  // Pseudo-random number from inputs. Matches vrf.go/scalarFromCurvePoints, and\\n  // https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-vrf-05#section-5.4.3\\n  // The draft calls (in step 7, via the definition of string_to_int, in\\n  // https://datatracker.ietf.org/doc/html/rfc8017#section-4.2 ) for taking the\\n  // first hash without checking that it corresponds to a number less than the\\n  // group order, which will lead to a slight bias in the sample.\\n  //\\n  // TODO(alx): We could save a bit of gas by following the standard here and\\n  // using the compressed representation of the points, if we collated the y\\n  // parities into a single bytes32.\\n  // https://www.pivotaltracker.com/story/show/171120588\\n  function scalarFromCurvePoints(\\n    uint256[2] memory hash,\\n    uint256[2] memory pk,\\n    uint256[2] memory gamma,\\n    address uWitness,\\n    uint256[2] memory v\\n  ) internal pure returns (uint256 s) {\\n    return uint256(keccak256(abi.encodePacked(SCALAR_FROM_CURVE_POINTS_HASH_PREFIX, hash, pk, gamma, v, uWitness)));\\n  }\\n\\n  // True if (gamma, c, s) is a correctly constructed randomness proof from pk\\n  // and seed. zInv must be the inverse of the third ordinate from\\n  // projectiveECAdd applied to cGammaWitness and sHashWitness. Corresponds to\\n  // section 5.3 of the IETF draft.\\n  //\\n  // TODO(alx): Since I'm only using pk in the ecrecover call, I could only pass\\n  // the x ordinate, and the parity of the y ordinate in the top bit of uWitness\\n  // (which I could make a uint256 without using any extra space.) Would save\\n  // about 2000 gas. https://www.pivotaltracker.com/story/show/170828567\\n  function verifyVRFProof(\\n    uint256[2] memory pk,\\n    uint256[2] memory gamma,\\n    uint256 c,\\n    uint256 s,\\n    uint256 seed,\\n    address uWitness,\\n    uint256[2] memory cGammaWitness,\\n    uint256[2] memory sHashWitness,\\n    uint256 zInv\\n  ) internal view {\\n    unchecked {\\n      require(isOnCurve(pk), \\\"public key is not on curve\\\");\\n      require(isOnCurve(gamma), \\\"gamma is not on curve\\\");\\n      require(isOnCurve(cGammaWitness), \\\"cGammaWitness is not on curve\\\");\\n      require(isOnCurve(sHashWitness), \\\"sHashWitness is not on curve\\\");\\n      // Step 5. of IETF draft section 5.3 (pk corresponds to 5.3's Y, and here\\n      // we use the address of u instead of u itself. Also, here we add the\\n      // terms instead of taking the difference, and in the proof construction in\\n      // vrf.GenerateProof, we correspondingly take the difference instead of\\n      // taking the sum as they do in step 7 of section 5.1.)\\n      require(verifyLinearCombinationWithGenerator(c, pk, s, uWitness), \\\"addr(c*pk+s*g)!=_uWitness\\\");\\n      // Step 4. of IETF draft section 5.3 (pk corresponds to Y, seed to alpha_string)\\n      uint256[2] memory hash = hashToCurve(pk, seed);\\n      // Step 6. of IETF draft section 5.3, but see note for step 5 about +/- terms\\n      uint256[2] memory v = linearCombination(c, gamma, cGammaWitness, s, hash, sHashWitness, zInv);\\n      // Steps 7. and 8. of IETF draft section 5.3\\n      uint256 derivedC = scalarFromCurvePoints(hash, pk, gamma, uWitness, v);\\n      require(c == derivedC, \\\"invalid proof\\\");\\n    }\\n  }\\n\\n  // Domain-separation tag for the hash used as the final VRF output.\\n  // Corresponds to vrfRandomOutputHashPrefix in vrf.go\\n  uint256 internal constant VRF_RANDOM_OUTPUT_HASH_PREFIX = 3;\\n\\n  struct Proof {\\n    uint256[2] pk;\\n    uint256[2] gamma;\\n    uint256 c;\\n    uint256 s;\\n    uint256 seed;\\n    address uWitness;\\n    uint256[2] cGammaWitness;\\n    uint256[2] sHashWitness;\\n    uint256 zInv;\\n  }\\n\\n  /* ***************************************************************************\\n     * @notice Returns proof's output, if proof is valid. Otherwise reverts\\n\\n     * @param proof vrf proof components\\n     * @param seed  seed used to generate the vrf output\\n     *\\n     * Throws if proof is invalid, otherwise:\\n     * @return output i.e., the random output implied by the proof\\n     * ***************************************************************************\\n     */\\n  function randomValueFromVRFProof(Proof memory proof, uint256 seed) internal view returns (uint256 output) {\\n    verifyVRFProof(\\n      proof.pk,\\n      proof.gamma,\\n      proof.c,\\n      proof.s,\\n      seed,\\n      proof.uWitness,\\n      proof.cGammaWitness,\\n      proof.sHashWitness,\\n      proof.zInv\\n    );\\n    output = uint256(keccak256(abi.encode(VRF_RANDOM_OUTPUT_HASH_PREFIX, proof.gamma)));\\n  }\\n}\\n\",\"keccak256\":\"0x5efe574be3a5b871ef7bcc7704355d21c1244f1a39a1266422a1b904d7b41944\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFCoordinatorV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../shared/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"../interfaces/BlockhashStoreInterface.sol\\\";\\nimport \\\"../interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"../interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"../interfaces/TypeAndVersionInterface.sol\\\";\\nimport \\\"../shared/interfaces/IERC677Receiver.sol\\\";\\nimport \\\"./VRF.sol\\\";\\nimport \\\"../shared/access/ConfirmedOwner.sol\\\";\\nimport \\\"./VRFConsumerBaseV2.sol\\\";\\nimport \\\"../ChainSpecificUtil.sol\\\";\\n\\ncontract VRFCoordinatorV2 is\\n    VRF,\\n    ConfirmedOwner,\\n    TypeAndVersionInterface,\\n    VRFCoordinatorV2Interface,\\n    IERC677Receiver\\n{\\n    LinkTokenInterface public immutable LINK;\\n    AggregatorV3Interface public immutable LINK_ETH_FEED;\\n    BlockhashStoreInterface public immutable BLOCKHASH_STORE;\\n\\n    // We need to maintain a list of consuming addresses.\\n    // This bound ensures we are able to loop over them as needed.\\n    // Should a user require more consumers, they can use multiple subscriptions.\\n    uint16 public constant MAX_CONSUMERS = 100;\\n    error TooManyConsumers();\\n    error InsufficientBalance();\\n    error InvalidConsumer(uint64 subId, address consumer);\\n    error InvalidSubscription();\\n    error OnlyCallableFromLink();\\n    error InvalidCalldata();\\n    error MustBeSubOwner(address owner);\\n    error PendingRequestExists();\\n    error MustBeRequestedOwner(address proposedOwner);\\n    error BalanceInvariantViolated(\\n        uint256 internalBalance,\\n        uint256 externalBalance\\n    ); // Should never happen\\n    event FundsRecovered(address to, uint256 amount);\\n    // We use the subscription struct (1 word)\\n    // at fulfillment time.\\n    struct Subscription {\\n        // There are only 1e9*1e18 = 1e27 juels in existence, so the balance can fit in uint96 (2^96 ~ 7e28)\\n        uint96 balance; // Common link balance used for all consumer requests.\\n        uint64 reqCount; // For fee tiers\\n    }\\n    // We use the config for the mgmt APIs\\n    struct SubscriptionConfig {\\n        address owner; // Owner can fund/withdraw/cancel the sub.\\n        address requestedOwner; // For safely transferring sub ownership.\\n        // Maintains the list of keys in s_consumers.\\n        // We do this for 2 reasons:\\n        // 1. To be able to clean up all keys from s_consumers when canceling a subscription.\\n        // 2. To be able to return the list of all consumers in getSubscription.\\n        // Note that we need the s_consumers map to be able to directly check if a\\n        // consumer is valid without reading all the consumers from storage.\\n        address[] consumers;\\n    }\\n    // Note a nonce of 0 indicates an the consumer is not assigned to that subscription.\\n    mapping(address => mapping(uint64 => uint64)) /* consumer */ /* subId */ /* nonce */\\n        private s_consumers;\\n    mapping(uint64 => SubscriptionConfig) /* subId */ /* subscriptionConfig */\\n        private s_subscriptionConfigs;\\n    mapping(uint64 => Subscription) /* subId */ /* subscription */\\n        private s_subscriptions;\\n    // We make the sub count public so that its possible to\\n    // get all the current subscriptions via getSubscription.\\n    uint64 private s_currentSubId;\\n    // s_totalBalance tracks the total link sent to/from\\n    // this contract through onTokenTransfer, cancelSubscription and oracleWithdraw.\\n    // A discrepancy with this contract's link balance indicates someone\\n    // sent tokens using transfer and so we may need to use recoverFunds.\\n    uint96 private s_totalBalance;\\n    event SubscriptionCreated(uint64 indexed subId, address owner);\\n    event SubscriptionFunded(\\n        uint64 indexed subId,\\n        uint256 oldBalance,\\n        uint256 newBalance\\n    );\\n    event SubscriptionConsumerAdded(uint64 indexed subId, address consumer);\\n    event SubscriptionConsumerRemoved(uint64 indexed subId, address consumer);\\n    event SubscriptionCanceled(\\n        uint64 indexed subId,\\n        address to,\\n        uint256 amount\\n    );\\n    event SubscriptionOwnerTransferRequested(\\n        uint64 indexed subId,\\n        address from,\\n        address to\\n    );\\n    event SubscriptionOwnerTransferred(\\n        uint64 indexed subId,\\n        address from,\\n        address to\\n    );\\n\\n    // Set this maximum to 200 to give us a 56 block window to fulfill\\n    // the request before requiring the block hash feeder.\\n    uint16 public constant MAX_REQUEST_CONFIRMATIONS = 200;\\n    uint32 public constant MAX_NUM_WORDS = 500;\\n    // 5k is plenty for an EXTCODESIZE call (2600) + warm CALL (100)\\n    // and some arithmetic operations.\\n    uint256 private constant GAS_FOR_CALL_EXACT_CHECK = 5_000;\\n    error InvalidRequestConfirmations(uint16 have, uint16 min, uint16 max);\\n    error GasLimitTooBig(uint32 have, uint32 want);\\n    error NumWordsTooBig(uint32 have, uint32 want);\\n    error ProvingKeyAlreadyRegistered(bytes32 keyHash);\\n    error NoSuchProvingKey(bytes32 keyHash);\\n    error InvalidLinkWeiPrice(int256 linkWei);\\n    error InsufficientGasForConsumer(uint256 have, uint256 want);\\n    error NoCorrespondingRequest();\\n    error IncorrectCommitment();\\n    error BlockhashNotInStore(uint256 blockNum);\\n    error PaymentTooLarge();\\n    error Reentrant();\\n    struct RequestCommitment {\\n        uint64 blockNum;\\n        uint64 subId;\\n        uint32 callbackGasLimit;\\n        uint32 numWords;\\n        address sender;\\n    }\\n    mapping(bytes32 => address) /* keyHash */ /* oracle */\\n        private s_provingKeys;\\n    bytes32[] private s_provingKeyHashes;\\n    mapping(address => uint96) /* oracle */ /* LINK balance */\\n        private s_withdrawableTokens;\\n    mapping(uint256 => bytes32) /* requestID */ /* commitment */\\n        private s_requestCommitments;\\n    event ProvingKeyRegistered(bytes32 keyHash, address indexed oracle);\\n    event ProvingKeyDeregistered(bytes32 keyHash, address indexed oracle);\\n    event RandomWordsRequested(\\n        bytes32 indexed keyHash,\\n        uint256 requestId,\\n        uint256 preSeed,\\n        uint64 indexed subId,\\n        uint16 minimumRequestConfirmations,\\n        uint32 callbackGasLimit,\\n        uint32 numWords,\\n        address indexed sender\\n    );\\n    event RandomWordsFulfilled(\\n        uint256 indexed requestId,\\n        uint256 outputSeed,\\n        uint96 payment,\\n        bool success\\n    );\\n\\n    struct Config {\\n        uint16 minimumRequestConfirmations;\\n        uint32 maxGasLimit;\\n        // Reentrancy protection.\\n        bool reentrancyLock;\\n        // stalenessSeconds is how long before we consider the feed price to be stale\\n        // and fallback to fallbackWeiPerUnitLink.\\n        uint32 stalenessSeconds;\\n        // Gas to cover oracle payment after we calculate the payment.\\n        // We make it configurable in case those operations are repriced.\\n        uint32 gasAfterPaymentCalculation;\\n    }\\n    int256 private s_fallbackWeiPerUnitLink;\\n    Config private s_config;\\n    FeeConfig private s_feeConfig;\\n    struct FeeConfig {\\n        // Flat fee charged per fulfillment in millionths of link\\n        // So fee range is [0, 2^32/10^6].\\n        uint32 fulfillmentFlatFeeLinkPPMTier1;\\n        uint32 fulfillmentFlatFeeLinkPPMTier2;\\n        uint32 fulfillmentFlatFeeLinkPPMTier3;\\n        uint32 fulfillmentFlatFeeLinkPPMTier4;\\n        uint32 fulfillmentFlatFeeLinkPPMTier5;\\n        uint24 reqsForTier2;\\n        uint24 reqsForTier3;\\n        uint24 reqsForTier4;\\n        uint24 reqsForTier5;\\n    }\\n    event ConfigSet(\\n        uint16 minimumRequestConfirmations,\\n        uint32 maxGasLimit,\\n        uint32 stalenessSeconds,\\n        uint32 gasAfterPaymentCalculation,\\n        int256 fallbackWeiPerUnitLink,\\n        FeeConfig feeConfig\\n    );\\n\\n    constructor(\\n        address link,\\n        address blockhashStore,\\n        address linkEthFeed\\n    ) ConfirmedOwner(msg.sender) {\\n        LINK = LinkTokenInterface(link);\\n        LINK_ETH_FEED = AggregatorV3Interface(linkEthFeed);\\n        BLOCKHASH_STORE = BlockhashStoreInterface(blockhashStore);\\n    }\\n\\n    /**\\n     * @notice Registers a proving key to an oracle.\\n     * @param oracle address of the oracle\\n     * @param publicProvingKey key that oracle can use to submit vrf fulfillments\\n     */\\n    function registerProvingKey(\\n        address oracle,\\n        uint256[2] calldata publicProvingKey\\n    ) external onlyOwner {\\n        bytes32 kh = hashOfKey(publicProvingKey);\\n        if (s_provingKeys[kh] != address(0)) {\\n            revert ProvingKeyAlreadyRegistered(kh);\\n        }\\n        s_provingKeys[kh] = oracle;\\n        s_provingKeyHashes.push(kh);\\n        emit ProvingKeyRegistered(kh, oracle);\\n    }\\n\\n    /**\\n     * @notice Deregisters a proving key to an oracle.\\n     * @param publicProvingKey key that oracle can use to submit vrf fulfillments\\n     */\\n    function deregisterProvingKey(\\n        uint256[2] calldata publicProvingKey\\n    ) external onlyOwner {\\n        bytes32 kh = hashOfKey(publicProvingKey);\\n        address oracle = s_provingKeys[kh];\\n        if (oracle == address(0)) {\\n            revert NoSuchProvingKey(kh);\\n        }\\n        delete s_provingKeys[kh];\\n        for (uint256 i = 0; i < s_provingKeyHashes.length; i++) {\\n            if (s_provingKeyHashes[i] == kh) {\\n                bytes32 last = s_provingKeyHashes[\\n                    s_provingKeyHashes.length - 1\\n                ];\\n                // Copy last element and overwrite kh to be deleted with it\\n                s_provingKeyHashes[i] = last;\\n                s_provingKeyHashes.pop();\\n            }\\n        }\\n        emit ProvingKeyDeregistered(kh, oracle);\\n    }\\n\\n    /**\\n     * @notice Returns the proving key hash key associated with this public key\\n     * @param publicKey the key to return the hash of\\n     */\\n    function hashOfKey(\\n        uint256[2] memory publicKey\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encode(publicKey));\\n    }\\n\\n    /**\\n     * @notice Sets the configuration of the vrfv2 coordinator\\n     * @param minimumRequestConfirmations global min for request confirmations\\n     * @param maxGasLimit global max for request gas limit\\n     * @param stalenessSeconds if the eth/link feed is more stale then this, use the fallback price\\n     * @param gasAfterPaymentCalculation gas used in doing accounting after completing the gas measurement\\n     * @param fallbackWeiPerUnitLink fallback eth/link price in the case of a stale feed\\n     * @param feeConfig fee tier configuration\\n     */\\n    function setConfig(\\n        uint16 minimumRequestConfirmations,\\n        uint32 maxGasLimit,\\n        uint32 stalenessSeconds,\\n        uint32 gasAfterPaymentCalculation,\\n        int256 fallbackWeiPerUnitLink,\\n        FeeConfig memory feeConfig\\n    ) external onlyOwner {\\n        if (minimumRequestConfirmations > MAX_REQUEST_CONFIRMATIONS) {\\n            revert InvalidRequestConfirmations(\\n                minimumRequestConfirmations,\\n                minimumRequestConfirmations,\\n                MAX_REQUEST_CONFIRMATIONS\\n            );\\n        }\\n        if (fallbackWeiPerUnitLink <= 0) {\\n            revert InvalidLinkWeiPrice(fallbackWeiPerUnitLink);\\n        }\\n        s_config = Config({\\n            minimumRequestConfirmations: minimumRequestConfirmations,\\n            maxGasLimit: maxGasLimit,\\n            stalenessSeconds: stalenessSeconds,\\n            gasAfterPaymentCalculation: gasAfterPaymentCalculation,\\n            reentrancyLock: false\\n        });\\n        s_feeConfig = feeConfig;\\n        s_fallbackWeiPerUnitLink = fallbackWeiPerUnitLink;\\n        emit ConfigSet(\\n            minimumRequestConfirmations,\\n            maxGasLimit,\\n            stalenessSeconds,\\n            gasAfterPaymentCalculation,\\n            fallbackWeiPerUnitLink,\\n            s_feeConfig\\n        );\\n    }\\n\\n    function getConfig()\\n        external\\n        view\\n        returns (\\n            uint16 minimumRequestConfirmations,\\n            uint32 maxGasLimit,\\n            uint32 stalenessSeconds,\\n            uint32 gasAfterPaymentCalculation\\n        )\\n    {\\n        return (\\n            s_config.minimumRequestConfirmations,\\n            s_config.maxGasLimit,\\n            s_config.stalenessSeconds,\\n            s_config.gasAfterPaymentCalculation\\n        );\\n    }\\n\\n    function getFeeConfig()\\n        external\\n        view\\n        returns (\\n            uint32 fulfillmentFlatFeeLinkPPMTier1,\\n            uint32 fulfillmentFlatFeeLinkPPMTier2,\\n            uint32 fulfillmentFlatFeeLinkPPMTier3,\\n            uint32 fulfillmentFlatFeeLinkPPMTier4,\\n            uint32 fulfillmentFlatFeeLinkPPMTier5,\\n            uint24 reqsForTier2,\\n            uint24 reqsForTier3,\\n            uint24 reqsForTier4,\\n            uint24 reqsForTier5\\n        )\\n    {\\n        return (\\n            s_feeConfig.fulfillmentFlatFeeLinkPPMTier1,\\n            s_feeConfig.fulfillmentFlatFeeLinkPPMTier2,\\n            s_feeConfig.fulfillmentFlatFeeLinkPPMTier3,\\n            s_feeConfig.fulfillmentFlatFeeLinkPPMTier4,\\n            s_feeConfig.fulfillmentFlatFeeLinkPPMTier5,\\n            s_feeConfig.reqsForTier2,\\n            s_feeConfig.reqsForTier3,\\n            s_feeConfig.reqsForTier4,\\n            s_feeConfig.reqsForTier5\\n        );\\n    }\\n\\n    function getTotalBalance() external view returns (uint256) {\\n        return s_totalBalance;\\n    }\\n\\n    function getFallbackWeiPerUnitLink() external view returns (int256) {\\n        return s_fallbackWeiPerUnitLink;\\n    }\\n\\n    /**\\n     * @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\\n     * @param subId subscription id\\n     * @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\\n     */\\n    function ownerCancelSubscription(uint64 subId) external onlyOwner {\\n        if (s_subscriptionConfigs[subId].owner == address(0)) {\\n            revert InvalidSubscription();\\n        }\\n        cancelSubscriptionHelper(subId, s_subscriptionConfigs[subId].owner);\\n    }\\n\\n    /**\\n     * @notice Recover link sent with transfer instead of transferAndCall.\\n     * @param to address to send link to\\n     */\\n    function recoverFunds(address to) external onlyOwner {\\n        uint256 externalBalance = LINK.balanceOf(address(this));\\n        uint256 internalBalance = uint256(s_totalBalance);\\n        if (internalBalance > externalBalance) {\\n            revert BalanceInvariantViolated(internalBalance, externalBalance);\\n        }\\n        if (internalBalance < externalBalance) {\\n            uint256 amount = externalBalance - internalBalance;\\n            LINK.transfer(to, amount);\\n            emit FundsRecovered(to, amount);\\n        }\\n        // If the balances are equal, nothing to be done.\\n    }\\n\\n    /**\\n     * @inheritdoc VRFCoordinatorV2Interface\\n     */\\n    function getRequestConfig()\\n        external\\n        view\\n        override\\n        returns (uint16, uint32, bytes32[] memory)\\n    {\\n        return (\\n            s_config.minimumRequestConfirmations,\\n            s_config.maxGasLimit,\\n            s_provingKeyHashes\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc VRFCoordinatorV2Interface\\n     */\\n    function requestRandomWords(\\n        bytes32 keyHash,\\n        uint64 subId,\\n        uint16 requestConfirmations,\\n        uint32 callbackGasLimit,\\n        uint32 numWords\\n    ) external override nonReentrant returns (uint256) {\\n        // Input validation using the subscription storage.\\n        if (s_subscriptionConfigs[subId].owner == address(0)) {\\n            revert InvalidSubscription();\\n        }\\n        // Its important to ensure that the consumer is in fact who they say they\\n        // are, otherwise they could use someone else's subscription balance.\\n        // A nonce of 0 indicates consumer is not allocated to the sub.\\n        uint64 currentNonce = s_consumers[msg.sender][subId];\\n        if (currentNonce == 0) {\\n            revert InvalidConsumer(subId, msg.sender);\\n        }\\n        // Input validation using the config storage word.\\n        if (\\n            requestConfirmations < s_config.minimumRequestConfirmations ||\\n            requestConfirmations > MAX_REQUEST_CONFIRMATIONS\\n        ) {\\n            revert InvalidRequestConfirmations(\\n                requestConfirmations,\\n                s_config.minimumRequestConfirmations,\\n                MAX_REQUEST_CONFIRMATIONS\\n            );\\n        }\\n        // No lower bound on the requested gas limit. A user could request 0\\n        // and they would simply be billed for the proof verification and wouldn't be\\n        // able to do anything with the random value.\\n        if (callbackGasLimit > s_config.maxGasLimit) {\\n            revert GasLimitTooBig(callbackGasLimit, s_config.maxGasLimit);\\n        }\\n        if (numWords > MAX_NUM_WORDS) {\\n            revert NumWordsTooBig(numWords, MAX_NUM_WORDS);\\n        }\\n        // Note we do not check whether the keyHash is valid to save gas.\\n        // The consequence for users is that they can send requests\\n        // for invalid keyHashes which will simply not be fulfilled.\\n        uint64 nonce = currentNonce + 1;\\n        (uint256 requestId, uint256 preSeed) = computeRequestId(\\n            keyHash,\\n            msg.sender,\\n            subId,\\n            nonce\\n        );\\n\\n        s_requestCommitments[requestId] = keccak256(\\n            abi.encode(\\n                requestId,\\n                ChainSpecificUtil.getBlockNumber(),\\n                subId,\\n                callbackGasLimit,\\n                numWords,\\n                msg.sender\\n            )\\n        );\\n        emit RandomWordsRequested(\\n            keyHash,\\n            requestId,\\n            preSeed,\\n            subId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords,\\n            msg.sender\\n        );\\n        s_consumers[msg.sender][subId] = nonce;\\n\\n        return requestId;\\n    }\\n\\n    /**\\n     * @notice Get request commitment\\n     * @param requestId id of request\\n     * @dev used to determine if a request is fulfilled or not\\n     */\\n    function getCommitment(uint256 requestId) external view returns (bytes32) {\\n        return s_requestCommitments[requestId];\\n    }\\n\\n    function computeRequestId(\\n        bytes32 keyHash,\\n        address sender,\\n        uint64 subId,\\n        uint64 nonce\\n    ) private pure returns (uint256, uint256) {\\n        uint256 preSeed = uint256(\\n            keccak256(abi.encode(keyHash, sender, subId, nonce))\\n        );\\n        return (uint256(keccak256(abi.encode(keyHash, preSeed))), preSeed);\\n    }\\n\\n    /**\\n     * @dev calls target address with exactly gasAmount gas and data as calldata\\n     * or reverts if at least gasAmount gas is not available.\\n     */\\n    function callWithExactGas(\\n        uint256 gasAmount,\\n        address target,\\n        bytes memory data\\n    ) private returns (bool success) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let g := gas()\\n            // Compute g -= GAS_FOR_CALL_EXACT_CHECK and check for underflow\\n            // The gas actually passed to the callee is min(gasAmount, 63//64*gas available).\\n            // We want to ensure that we revert if gasAmount >  63//64*gas available\\n            // as we do not want to provide them with less, however that check itself costs\\n            // gas.  GAS_FOR_CALL_EXACT_CHECK ensures we have at least enough gas to be able\\n            // to revert if gasAmount >  63//64*gas available.\\n            if lt(g, GAS_FOR_CALL_EXACT_CHECK) {\\n                revert(0, 0)\\n            }\\n            g := sub(g, GAS_FOR_CALL_EXACT_CHECK)\\n            // if g - g//64 <= gasAmount, revert\\n            // (we subtract g//64 because of EIP-150)\\n            if iszero(gt(sub(g, div(g, 64)), gasAmount)) {\\n                revert(0, 0)\\n            }\\n            // solidity calls check that a contract actually exists at the destination, so we do the same\\n            if iszero(extcodesize(target)) {\\n                revert(0, 0)\\n            }\\n            // call and return whether we succeeded. ignore return data\\n            // call(gas,addr,value,argsOffset,argsLength,retOffset,retLength)\\n            success := call(\\n                gasAmount,\\n                target,\\n                0,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n        }\\n        return success;\\n    }\\n\\n    function getRandomnessFromProof(\\n        Proof memory proof,\\n        RequestCommitment memory rc\\n    )\\n        private\\n        view\\n        returns (bytes32 keyHash, uint256 requestId, uint256 randomness)\\n    {\\n        keyHash = hashOfKey(proof.pk);\\n        // Only registered proving keys are permitted.\\n        address oracle = s_provingKeys[keyHash];\\n        if (oracle == address(0)) {\\n            revert NoSuchProvingKey(keyHash);\\n        }\\n        requestId = uint256(keccak256(abi.encode(keyHash, proof.seed)));\\n        bytes32 commitment = s_requestCommitments[requestId];\\n        if (commitment == 0) {\\n            revert NoCorrespondingRequest();\\n        }\\n        if (\\n            commitment !=\\n            keccak256(\\n                abi.encode(\\n                    requestId,\\n                    rc.blockNum,\\n                    rc.subId,\\n                    rc.callbackGasLimit,\\n                    rc.numWords,\\n                    rc.sender\\n                )\\n            )\\n        ) {\\n            revert IncorrectCommitment();\\n        }\\n\\n        bytes32 blockHash = ChainSpecificUtil.getBlockhash(rc.blockNum);\\n        if (blockHash == bytes32(0)) {\\n            blockHash = BLOCKHASH_STORE.getBlockhash(rc.blockNum);\\n            if (blockHash == bytes32(0)) {\\n                revert BlockhashNotInStore(rc.blockNum);\\n            }\\n        }\\n\\n        // The seed actually used by the VRF machinery, mixing in the blockhash\\n        uint256 actualSeed = uint256(\\n            keccak256(abi.encodePacked(proof.seed, blockHash))\\n        );\\n        randomness = VRF.randomValueFromVRFProof(proof, actualSeed); // Reverts on failure\\n    }\\n\\n    /*\\n     * @notice Compute fee based on the request count\\n     * @param reqCount number of requests\\n     * @return feePPM fee in LINK PPM\\n     */\\n    function getFeeTier(uint64 reqCount) public view returns (uint32) {\\n        FeeConfig memory fc = s_feeConfig;\\n        if (0 <= reqCount && reqCount <= fc.reqsForTier2) {\\n            return fc.fulfillmentFlatFeeLinkPPMTier1;\\n        }\\n        if (fc.reqsForTier2 < reqCount && reqCount <= fc.reqsForTier3) {\\n            return fc.fulfillmentFlatFeeLinkPPMTier2;\\n        }\\n        if (fc.reqsForTier3 < reqCount && reqCount <= fc.reqsForTier4) {\\n            return fc.fulfillmentFlatFeeLinkPPMTier3;\\n        }\\n        if (fc.reqsForTier4 < reqCount && reqCount <= fc.reqsForTier5) {\\n            return fc.fulfillmentFlatFeeLinkPPMTier4;\\n        }\\n        return fc.fulfillmentFlatFeeLinkPPMTier5;\\n    }\\n\\n    /*\\n     * @notice Fulfill a randomness request\\n     * @param proof contains the proof and randomness\\n     * @param rc request commitment pre-image, committed to at request time\\n     * @return payment amount billed to the subscription\\n     * @dev simulated offchain to determine if sufficient balance is present to fulfill the request\\n     */\\n    function fulfillRandomWords(\\n        Proof memory proof,\\n        RequestCommitment memory rc\\n    ) external nonReentrant returns (uint96) {\\n        uint256 startGas = gasleft();\\n        (\\n            bytes32 keyHash,\\n            uint256 requestId,\\n            uint256 randomness\\n        ) = getRandomnessFromProof(proof, rc);\\n\\n        uint256[] memory randomWords = new uint256[](rc.numWords);\\n        for (uint256 i = 0; i < rc.numWords; i++) {\\n            randomWords[i] = uint256(keccak256(abi.encode(randomness, i)));\\n        }\\n\\n        delete s_requestCommitments[requestId];\\n        VRFConsumerBaseV2 v;\\n        bytes memory resp = abi.encodeWithSelector(\\n            v.rawFulfillRandomWords.selector,\\n            requestId,\\n            randomWords\\n        );\\n        // Call with explicitly the amount of callback gas requested\\n        // Important to not let them exhaust the gas budget and avoid oracle payment.\\n        // Do not allow any non-view/non-pure coordinator functions to be called\\n        // during the consumers callback code via reentrancyLock.\\n        // Note that callWithExactGas will revert if we do not have sufficient gas\\n        // to give the callee their requested amount.\\n        s_config.reentrancyLock = true;\\n        bool success = callWithExactGas(rc.callbackGasLimit, rc.sender, resp);\\n        s_config.reentrancyLock = false;\\n\\n        // Increment the req count for fee tier selection.\\n        uint64 reqCount = s_subscriptions[rc.subId].reqCount;\\n        s_subscriptions[rc.subId].reqCount += 1;\\n\\n        // We want to charge users exactly for how much gas they use in their callback.\\n        // The gasAfterPaymentCalculation is meant to cover these additional operations where we\\n        // decrement the subscription balance and increment the oracles withdrawable balance.\\n        // We also add the flat link fee to the payment amount.\\n        // Its specified in millionths of link, if s_config.fulfillmentFlatFeeLinkPPM = 1\\n        // 1 link / 1e6 = 1e18 juels / 1e6 = 1e12 juels.\\n        uint96 payment = calculatePaymentAmount(\\n            startGas,\\n            s_config.gasAfterPaymentCalculation,\\n            getFeeTier(reqCount),\\n            tx.gasprice\\n        );\\n        if (s_subscriptions[rc.subId].balance < payment) {\\n            revert InsufficientBalance();\\n        }\\n        s_subscriptions[rc.subId].balance -= payment;\\n        s_withdrawableTokens[s_provingKeys[keyHash]] += payment;\\n        // Include payment in the event for tracking costs.\\n        emit RandomWordsFulfilled(requestId, randomness, payment, success);\\n        return payment;\\n    }\\n\\n    // Get the amount of gas used for fulfillment\\n    function calculatePaymentAmount(\\n        uint256 startGas,\\n        uint256 gasAfterPaymentCalculation,\\n        uint32 fulfillmentFlatFeeLinkPPM,\\n        uint256 weiPerUnitGas\\n    ) internal view returns (uint96) {\\n        int256 weiPerUnitLink;\\n        weiPerUnitLink = getFeedData();\\n        if (weiPerUnitLink <= 0) {\\n            revert InvalidLinkWeiPrice(weiPerUnitLink);\\n        }\\n        // Will return non-zero on chains that have this enabled\\n        uint256 l1CostWei = ChainSpecificUtil.getCurrentTxL1GasFees();\\n        // (1e18 juels/link) ((wei/gas * gas) + l1wei) / (wei/link) = juels\\n        uint256 paymentNoFee = (1e18 *\\n            (weiPerUnitGas *\\n                (gasAfterPaymentCalculation + startGas - gasleft()) +\\n                l1CostWei)) / uint256(weiPerUnitLink);\\n        uint256 fee = 1e12 * uint256(fulfillmentFlatFeeLinkPPM);\\n        if (paymentNoFee > (1e27 - fee)) {\\n            revert PaymentTooLarge(); // Payment + fee cannot be more than all of the link in existence.\\n        }\\n        return uint96(paymentNoFee + fee);\\n    }\\n\\n    function getFeedData() private view returns (int256) {\\n        uint32 stalenessSeconds = s_config.stalenessSeconds;\\n        bool staleFallback = stalenessSeconds > 0;\\n        uint256 timestamp;\\n        int256 weiPerUnitLink;\\n        (, weiPerUnitLink, , timestamp, ) = LINK_ETH_FEED.latestRoundData();\\n        // solhint-disable-next-line not-rely-on-time\\n        if (staleFallback && stalenessSeconds < block.timestamp - timestamp) {\\n            weiPerUnitLink = s_fallbackWeiPerUnitLink;\\n        }\\n        return weiPerUnitLink;\\n    }\\n\\n    /*\\n     * @notice Oracle withdraw LINK earned through fulfilling requests\\n     * @param recipient where to send the funds\\n     * @param amount amount to withdraw\\n     */\\n    function oracleWithdraw(\\n        address recipient,\\n        uint96 amount\\n    ) external nonReentrant {\\n        if (s_withdrawableTokens[msg.sender] < amount) {\\n            revert InsufficientBalance();\\n        }\\n        s_withdrawableTokens[msg.sender] -= amount;\\n        s_totalBalance -= amount;\\n        if (!LINK.transfer(recipient, amount)) {\\n            revert InsufficientBalance();\\n        }\\n    }\\n\\n    function onTokenTransfer(\\n        address /* sender */,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external override nonReentrant {\\n        if (msg.sender != address(LINK)) {\\n            revert OnlyCallableFromLink();\\n        }\\n        if (data.length != 32) {\\n            revert InvalidCalldata();\\n        }\\n        uint64 subId = abi.decode(data, (uint64));\\n        if (s_subscriptionConfigs[subId].owner == address(0)) {\\n            revert InvalidSubscription();\\n        }\\n        // We do not check that the msg.sender is the subscription owner,\\n        // anyone can fund a subscription.\\n        uint256 oldBalance = s_subscriptions[subId].balance;\\n        s_subscriptions[subId].balance += uint96(amount);\\n        s_totalBalance += uint96(amount);\\n        emit SubscriptionFunded(subId, oldBalance, oldBalance + amount);\\n    }\\n\\n    function getCurrentSubId() external view returns (uint64) {\\n        return s_currentSubId;\\n    }\\n\\n    /**\\n     * @inheritdoc VRFCoordinatorV2Interface\\n     */\\n    function getSubscription(\\n        uint64 subId\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint96 balance,\\n            uint64 reqCount,\\n            address owner,\\n            address[] memory consumers\\n        )\\n    {\\n        if (s_subscriptionConfigs[subId].owner == address(0)) {\\n            revert InvalidSubscription();\\n        }\\n        return (\\n            s_subscriptions[subId].balance,\\n            s_subscriptions[subId].reqCount,\\n            s_subscriptionConfigs[subId].owner,\\n            s_subscriptionConfigs[subId].consumers\\n        );\\n    }\\n\\n    /**\\n     * @inheritdoc VRFCoordinatorV2Interface\\n     */\\n    function createSubscription()\\n        external\\n        override\\n        nonReentrant\\n        returns (uint64)\\n    {\\n        s_currentSubId++;\\n        uint64 currentSubId = s_currentSubId;\\n        address[] memory consumers = new address[](0);\\n        s_subscriptions[currentSubId] = Subscription({balance: 0, reqCount: 0});\\n        s_subscriptionConfigs[currentSubId] = SubscriptionConfig({\\n            owner: msg.sender,\\n            requestedOwner: address(0),\\n            consumers: consumers\\n        });\\n\\n        emit SubscriptionCreated(currentSubId, msg.sender);\\n        return currentSubId;\\n    }\\n\\n    /**\\n     * @inheritdoc VRFCoordinatorV2Interface\\n     */\\n    function requestSubscriptionOwnerTransfer(\\n        uint64 subId,\\n        address newOwner\\n    ) external override onlySubOwner(subId) nonReentrant {\\n        // Proposing to address(0) would never be claimable so don't need to check.\\n        if (s_subscriptionConfigs[subId].requestedOwner != newOwner) {\\n            s_subscriptionConfigs[subId].requestedOwner = newOwner;\\n            emit SubscriptionOwnerTransferRequested(\\n                subId,\\n                msg.sender,\\n                newOwner\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc VRFCoordinatorV2Interface\\n     */\\n    function acceptSubscriptionOwnerTransfer(\\n        uint64 subId\\n    ) external override nonReentrant {\\n        if (s_subscriptionConfigs[subId].owner == address(0)) {\\n            revert InvalidSubscription();\\n        }\\n        if (s_subscriptionConfigs[subId].requestedOwner != msg.sender) {\\n            revert MustBeRequestedOwner(\\n                s_subscriptionConfigs[subId].requestedOwner\\n            );\\n        }\\n        address oldOwner = s_subscriptionConfigs[subId].owner;\\n        s_subscriptionConfigs[subId].owner = msg.sender;\\n        s_subscriptionConfigs[subId].requestedOwner = address(0);\\n        emit SubscriptionOwnerTransferred(subId, oldOwner, msg.sender);\\n    }\\n\\n    /**\\n     * @inheritdoc VRFCoordinatorV2Interface\\n     */\\n    function removeConsumer(\\n        uint64 subId,\\n        address consumer\\n    ) external override onlySubOwner(subId) nonReentrant {\\n        if (pendingRequestExists(subId)) {\\n            revert PendingRequestExists();\\n        }\\n        if (s_consumers[consumer][subId] == 0) {\\n            revert InvalidConsumer(subId, consumer);\\n        }\\n        // Note bounded by MAX_CONSUMERS\\n        address[] memory consumers = s_subscriptionConfigs[subId].consumers;\\n        uint256 lastConsumerIndex = consumers.length - 1;\\n        for (uint256 i = 0; i < consumers.length; i++) {\\n            if (consumers[i] == consumer) {\\n                address last = consumers[lastConsumerIndex];\\n                // Storage write to preserve last element\\n                s_subscriptionConfigs[subId].consumers[i] = last;\\n                // Storage remove last element\\n                s_subscriptionConfigs[subId].consumers.pop();\\n                break;\\n            }\\n        }\\n        delete s_consumers[consumer][subId];\\n        emit SubscriptionConsumerRemoved(subId, consumer);\\n    }\\n\\n    /**\\n     * @inheritdoc VRFCoordinatorV2Interface\\n     */\\n    function addConsumer(\\n        uint64 subId,\\n        address consumer\\n    ) external override onlySubOwner(subId) nonReentrant {\\n        // Already maxed, cannot add any more consumers.\\n        if (s_subscriptionConfigs[subId].consumers.length == MAX_CONSUMERS) {\\n            revert TooManyConsumers();\\n        }\\n        if (s_consumers[consumer][subId] != 0) {\\n            // Idempotence - do nothing if already added.\\n            // Ensures uniqueness in s_subscriptions[subId].consumers.\\n            return;\\n        }\\n        // Initialize the nonce to 1, indicating the consumer is allocated.\\n        s_consumers[consumer][subId] = 1;\\n        s_subscriptionConfigs[subId].consumers.push(consumer);\\n\\n        emit SubscriptionConsumerAdded(subId, consumer);\\n    }\\n\\n    /**\\n     * @inheritdoc VRFCoordinatorV2Interface\\n     */\\n    function cancelSubscription(\\n        uint64 subId,\\n        address to\\n    ) external override onlySubOwner(subId) nonReentrant {\\n        if (pendingRequestExists(subId)) {\\n            revert PendingRequestExists();\\n        }\\n        cancelSubscriptionHelper(subId, to);\\n    }\\n\\n    function cancelSubscriptionHelper(\\n        uint64 subId,\\n        address to\\n    ) private nonReentrant {\\n        SubscriptionConfig memory subConfig = s_subscriptionConfigs[subId];\\n        Subscription memory sub = s_subscriptions[subId];\\n        uint96 balance = sub.balance;\\n        // Note bounded by MAX_CONSUMERS;\\n        // If no consumers, does nothing.\\n        for (uint256 i = 0; i < subConfig.consumers.length; i++) {\\n            delete s_consumers[subConfig.consumers[i]][subId];\\n        }\\n        delete s_subscriptionConfigs[subId];\\n        delete s_subscriptions[subId];\\n        s_totalBalance -= balance;\\n        if (!LINK.transfer(to, uint256(balance))) {\\n            revert InsufficientBalance();\\n        }\\n        emit SubscriptionCanceled(subId, to, balance);\\n    }\\n\\n    /**\\n     * @inheritdoc VRFCoordinatorV2Interface\\n     * @dev Looping is bounded to MAX_CONSUMERS*(number of keyhashes).\\n     * @dev Used to disable subscription canceling while outstanding request are present.\\n     */\\n    function pendingRequestExists(\\n        uint64 subId\\n    ) public view override returns (bool) {\\n        SubscriptionConfig memory subConfig = s_subscriptionConfigs[subId];\\n        for (uint256 i = 0; i < subConfig.consumers.length; i++) {\\n            for (uint256 j = 0; j < s_provingKeyHashes.length; j++) {\\n                (uint256 reqId, ) = computeRequestId(\\n                    s_provingKeyHashes[j],\\n                    subConfig.consumers[i],\\n                    subId,\\n                    s_consumers[subConfig.consumers[i]][subId]\\n                );\\n                if (s_requestCommitments[reqId] != 0) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    modifier onlySubOwner(uint64 subId) {\\n        address owner = s_subscriptionConfigs[subId].owner;\\n        if (owner == address(0)) {\\n            revert InvalidSubscription();\\n        }\\n        if (msg.sender != owner) {\\n            revert MustBeSubOwner(owner);\\n        }\\n        _;\\n    }\\n\\n    modifier nonReentrant() {\\n        if (s_config.reentrancyLock) {\\n            revert Reentrant();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice The type and version of this contract\\n     * @return Type and version string\\n     */\\n    function typeAndVersion()\\n        external\\n        pure\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return \\\"VRFCoordinatorV2 1.0.0\\\";\\n    }\\n}\\n\",\"keccak256\":\"0xaaa3ae138eef964f56db5c7f3e489699312132bacbf422074c85621b156f773f\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport {VRFCoordinatorV2} from \\\"@chainlink/contracts/src/v0.8/vrf/VRFCoordinatorV2.sol\\\";\\r\\nimport {VRFConsumerBaseV2} from \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\r\\nimport {KeeperCompatibleInterface} from \\\"@chainlink/contracts/src/v0.8/automation/KeeperCompatible.sol\\\";\\r\\n\\r\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\r\\n    enum RaffleState {\\r\\n        OPEN,\\r\\n        CALCULATING\\r\\n    }\\r\\n\\r\\n    uint256 private immutable i_entranceFee;\\r\\n    address payable[] private s_players;\\r\\n    VRFCoordinatorV2 private immutable i_vrfCoordinator;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint256 private immutable i_subscriptionId;\\r\\n    uint16 private constant REQUEST_CONFIRMATION = 3;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint32 private constant NUM_WORDS = 1;\\r\\n    uint256 private immutable i_interval;\\r\\n\\r\\n    //Lottery Variables\\r\\n    address private s_recentWinner;\\r\\n    RaffleState private s_raffleState;\\r\\n    uint256 private s_lastTimeStamp;\\r\\n\\r\\n    event RaffleEnter(address indexed player);\\r\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\r\\n    event WinnerPicked(address indexed winner);\\r\\n\\r\\n    constructor(\\r\\n        address vrfCoordinatorV2,\\r\\n        uint256 entranceFee,\\r\\n        bytes32 gasLane,\\r\\n        uint256 subscriptionId,\\r\\n        uint32 callbackGasLimit,\\r\\n        uint256 interval\\r\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\r\\n        i_entranceFee = entranceFee;\\r\\n        //log(vrfCoordinatorV2);\\r\\n        i_vrfCoordinator = VRFCoordinatorV2(vrfCoordinatorV2);\\r\\n        i_gasLane = gasLane;\\r\\n        i_subscriptionId = subscriptionId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        i_interval = interval;\\r\\n    }\\r\\n\\r\\n    function enterRaffle() public payable {\\r\\n        require(msg.value >= i_entranceFee, \\\"Not enough ETH!\\\");\\r\\n        require(s_raffleState == RaffleState.OPEN, \\\"Not open\\\");\\r\\n        s_players.push(payable(msg.sender));\\r\\n        emit RaffleEnter(msg.sender);\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes memory\\r\\n    ) public override returns (bool upkeepNeeded, bytes memory) {\\r\\n        bool isOpen = (RaffleState.OPEN == s_raffleState);\\r\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\r\\n        bool hasPlayers = (s_players.length > 0);\\r\\n        bool hasBalance = address(this).balance > 0;\\r\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata) external override {\\r\\n        (bool upKeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n        require(upKeepNeeded == true, \\\"Upkeep not needed\\\");\\r\\n        s_raffleState = RaffleState.CALCULATING;\\r\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\r\\n            i_gasLane,\\r\\n            uint64(i_subscriptionId),\\r\\n            REQUEST_CONFIRMATION,\\r\\n            i_callbackGasLimit,\\r\\n            NUM_WORDS\\r\\n        );\\r\\n        emit RequestedRaffleWinner(requestId);\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256,\\r\\n        uint256[] memory randomWords\\r\\n    ) internal override {\\r\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\r\\n        address payable recentWinner = s_players[indexOfWinner];\\r\\n        s_recentWinner = recentWinner;\\r\\n        s_raffleState = RaffleState.OPEN;\\r\\n        s_players = new address payable[](0);\\r\\n        s_lastTimeStamp = block.timestamp;\\r\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success == true, \\\"Transfer Failed!\\\");\\r\\n        emit WinnerPicked(recentWinner);\\r\\n    }\\r\\n\\r\\n    function getEntranceFee() public view returns (uint256) {\\r\\n        return i_entranceFee;\\r\\n    }\\r\\n\\r\\n    function getPlayer(uint256 index) public view returns (address) {\\r\\n        return s_players[index];\\r\\n    }\\r\\n\\r\\n    function getRecentWinner() public view returns (address) {\\r\\n        return s_recentWinner;\\r\\n    }\\r\\n\\r\\n    function getRaffleState() public view returns (RaffleState) {\\r\\n        return s_raffleState;\\r\\n    }\\r\\n\\r\\n    function getNumWords() public pure returns (uint256) {\\r\\n        return NUM_WORDS;\\r\\n    }\\r\\n\\r\\n    function getNumberOfPlayers() public view returns (uint256) {\\r\\n        return s_players.length;\\r\\n    }\\r\\n\\r\\n    function getLatestTimeStamp() public view returns (uint256) {\\r\\n        return s_lastTimeStamp;\\r\\n    }\\r\\n\\r\\n    function getRequestConfirmation() public pure returns (uint256) {\\r\\n        return REQUEST_CONFIRMATION;\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns (uint256) {\\r\\n        return i_interval;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xb185b18adb4487a8abd5a79e5daf623253e4d1d824684df0782927569c54aa0c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b50604051620019303803806200193083398181016040528101906200003891906200023b565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508261010081815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff02191690836001811115620000f957620000f8620002d7565b5b02179055504260028190555080610140818152505050505050505062000306565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200014c826200011f565b9050919050565b6200015e816200013f565b81146200016a57600080fd5b50565b6000815190506200017e8162000153565b92915050565b6000819050919050565b620001998162000184565b8114620001a557600080fd5b50565b600081519050620001b9816200018e565b92915050565b6000819050919050565b620001d481620001bf565b8114620001e057600080fd5b50565b600081519050620001f481620001c9565b92915050565b600063ffffffff82169050919050565b6200021581620001fa565b81146200022157600080fd5b50565b60008151905062000235816200020a565b92915050565b60008060008060008060c087890312156200025b576200025a6200011a565b5b60006200026b89828a016200016d565b96505060206200027e89828a01620001a8565b95505060406200029189828a01620001e3565b9450506060620002a489828a01620001a8565b9350506080620002b789828a0162000224565b92505060a0620002ca89828a01620001a8565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516115ba62000376600039600081816107c70152610835015260006106920152600061066f0152600061064e015260006106120152600081816102fa01526103f7015260008181610337015261038b01526115ba6000f3fe6080604052600436106100c25760003560e01c8063473f1ddc1161007f57806391ad27b41161005957806391ad27b414610238578063ca6a9ef814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b8063473f1ddc146101a457806353a2c19a146101cf5780636e04ff0d146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc53914610146578063320229eb146101505780634585e33b1461017b575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bba565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610c4c565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e00565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b50610165610576565b6040516101729190610bba565b60405180910390f35b34801561018757600080fd5b506101a2600480360381019061019d9190610eb7565b610580565b005b3480156101b057600080fd5b506101b961074b565b6040516101c69190610f45565b60405180910390f35b3480156101db57600080fd5b506101e4610775565b6040516101f19190610bba565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190611015565b610784565b60405161022f9291906110f8565b60405180910390f35b34801561024457600080fd5b5061024d610831565b60405161025a9190610bba565b60405180910390f35b34801561026f57600080fd5b50610278610859565b6040516102859190610bba565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190611128565b610866565b6040516102c29190610f45565b60405180910390f35b3480156102d757600080fd5b506102e06108ad565b6040516102ed9190610bba565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190611155565b60405180910390fd5b6103f182826108b9565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044f906111db565b60405180910390fd5b6000600181111561046c5761046b610bd5565b5b600160149054906101000a900460ff16600181111561048e5761048d610bd5565b5b146104ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c590611247565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b600061059a60405180602001604052806000815250610784565b50905060011515811515146105e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105db906112b3565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561060957610608610bd5565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106d395949392919061134b565b6020604051808303816000875af11580156106f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071691906113b3565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b600060606000600160149054906101000a900460ff1660018111156107ac576107ab610bd5565b5b600060018111156107c0576107bf610bd5565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426107f4919061140f565b119050600080600080549050119050600080471190508380156108145750825b801561081d5750815b80156108265750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600361ffff16905090565b600080828154811061087b5761087a611443565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106108d4576108d3611443565b5b60200260200101516108e691906114a1565b905060008082815481106108fd576108fc611443565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff0219169083600181111561099157610990610bd5565b5b0217905550600067ffffffffffffffff8111156109b1576109b0610cbd565b5b6040519080825280602002602001820160405280156109df5781602001602082028036833780820191505090505b50600090805190602001906109f5929190610afa565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a2390611503565b60006040518083038185875af1925050503d8060008114610a60576040519150601f19603f3d011682016040523d82523d6000602084013e610a65565b606091505b505090506001151581151514610ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa790611564565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b73579160200282015b82811115610b725782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b1a565b5b509050610b809190610b84565b5090565b5b80821115610b9d576000816000905550600101610b85565b5090565b6000819050919050565b610bb481610ba1565b82525050565b6000602082019050610bcf6000830184610bab565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c1557610c14610bd5565b5b50565b6000819050610c2682610c04565b919050565b6000610c3682610c18565b9050919050565b610c4681610c2b565b82525050565b6000602082019050610c616000830184610c3d565b92915050565b6000604051905090565b600080fd5b600080fd5b610c8481610ba1565b8114610c8f57600080fd5b50565b600081359050610ca181610c7b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cf582610cac565b810181811067ffffffffffffffff82111715610d1457610d13610cbd565b5b80604052505050565b6000610d27610c67565b9050610d338282610cec565b919050565b600067ffffffffffffffff821115610d5357610d52610cbd565b5b602082029050602081019050919050565b600080fd5b6000610d7c610d7784610d38565b610d1d565b90508083825260208201905060208402830185811115610d9f57610d9e610d64565b5b835b81811015610dc85780610db48882610c92565b845260208401935050602081019050610da1565b5050509392505050565b600082601f830112610de757610de6610ca7565b5b8135610df7848260208601610d69565b91505092915050565b60008060408385031215610e1757610e16610c71565b5b6000610e2585828601610c92565b925050602083013567ffffffffffffffff811115610e4657610e45610c76565b5b610e5285828601610dd2565b9150509250929050565b600080fd5b60008083601f840112610e7757610e76610ca7565b5b8235905067ffffffffffffffff811115610e9457610e93610e5c565b5b602083019150836001820283011115610eb057610eaf610d64565b5b9250929050565b60008060208385031215610ece57610ecd610c71565b5b600083013567ffffffffffffffff811115610eec57610eeb610c76565b5b610ef885828601610e61565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f2f82610f04565b9050919050565b610f3f81610f24565b82525050565b6000602082019050610f5a6000830184610f36565b92915050565b600080fd5b600067ffffffffffffffff821115610f8057610f7f610cbd565b5b610f8982610cac565b9050602081019050919050565b82818337600083830152505050565b6000610fb8610fb384610f65565b610d1d565b905082815260208101848484011115610fd457610fd3610f60565b5b610fdf848285610f96565b509392505050565b600082601f830112610ffc57610ffb610ca7565b5b813561100c848260208601610fa5565b91505092915050565b60006020828403121561102b5761102a610c71565b5b600082013567ffffffffffffffff81111561104957611048610c76565b5b61105584828501610fe7565b91505092915050565b60008115159050919050565b6110738161105e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110b3578082015181840152602081019050611098565b60008484015250505050565b60006110ca82611079565b6110d48185611084565b93506110e4818560208601611095565b6110ed81610cac565b840191505092915050565b600060408201905061110d600083018561106a565b818103602083015261111f81846110bf565b90509392505050565b60006020828403121561113e5761113d610c71565b5b600061114c84828501610c92565b91505092915050565b600060408201905061116a6000830185610f36565b6111776020830184610f36565b9392505050565b600082825260208201905092915050565b7f4e6f7420656e6f75676820455448210000000000000000000000000000000000600082015250565b60006111c5600f8361117e565b91506111d08261118f565b602082019050919050565b600060208201905081810360008301526111f4816111b8565b9050919050565b7f4e6f74206f70656e000000000000000000000000000000000000000000000000600082015250565b600061123160088361117e565b915061123c826111fb565b602082019050919050565b6000602082019050818103600083015261126081611224565b9050919050565b7f55706b656570206e6f74206e6565646564000000000000000000000000000000600082015250565b600061129d60118361117e565b91506112a882611267565b602082019050919050565b600060208201905081810360008301526112cc81611290565b9050919050565b6000819050919050565b6112e6816112d3565b82525050565b600067ffffffffffffffff82169050919050565b611309816112ec565b82525050565b600061ffff82169050919050565b6113268161130f565b82525050565b600063ffffffff82169050919050565b6113458161132c565b82525050565b600060a08201905061136060008301886112dd565b61136d6020830187611300565b61137a604083018661131d565b611387606083018561133c565b611394608083018461133c565b9695505050505050565b6000815190506113ad81610c7b565b92915050565b6000602082840312156113c9576113c8610c71565b5b60006113d78482850161139e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061141a82610ba1565b915061142583610ba1565b925082820390508181111561143d5761143c6113e0565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114ac82610ba1565b91506114b783610ba1565b9250826114c7576114c6611472565b5b828206905092915050565b600081905092915050565b50565b60006114ed6000836114d2565b91506114f8826114dd565b600082019050919050565b600061150e826114e0565b9150819050919050565b7f5472616e73666572204661696c65642100000000000000000000000000000000600082015250565b600061154e60108361117e565b915061155982611518565b602082019050919050565b6000602082019050818103600083015261157d81611541565b905091905056fea26469706673582212205469a24b85fc232522d262f3cbfe88bdbc8754633a4bbf3657b4e8f1ae3be7a864736f6c63430008180033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c8063473f1ddc1161007f57806391ad27b41161005957806391ad27b414610238578063ca6a9ef814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b8063473f1ddc146101a457806353a2c19a146101cf5780636e04ff0d146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc53914610146578063320229eb146101505780634585e33b1461017b575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bba565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b6040516101149190610c4c565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e00565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b50610165610576565b6040516101729190610bba565b60405180910390f35b34801561018757600080fd5b506101a2600480360381019061019d9190610eb7565b610580565b005b3480156101b057600080fd5b506101b961074b565b6040516101c69190610f45565b60405180910390f35b3480156101db57600080fd5b506101e4610775565b6040516101f19190610bba565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190611015565b610784565b60405161022f9291906110f8565b60405180910390f35b34801561024457600080fd5b5061024d610831565b60405161025a9190610bba565b60405180910390f35b34801561026f57600080fd5b50610278610859565b6040516102859190610bba565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190611128565b610866565b6040516102c29190610f45565b60405180910390f35b3480156102d757600080fd5b506102e06108ad565b6040516102ed9190610bba565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190611155565b60405180910390fd5b6103f182826108b9565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610458576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044f906111db565b60405180910390fd5b6000600181111561046c5761046b610bd5565b5b600160149054906101000a900460ff16600181111561048e5761048d610bd5565b5b146104ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c590611247565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b600061059a60405180602001604052806000815250610784565b50905060011515811515146105e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105db906112b3565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561060957610608610bd5565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106d395949392919061134b565b6020604051808303816000875af11580156106f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071691906113b3565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b600060606000600160149054906101000a900460ff1660018111156107ac576107ab610bd5565b5b600060018111156107c0576107bf610bd5565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600254426107f4919061140f565b119050600080600080549050119050600080471190508380156108145750825b801561081d5750815b80156108265750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600361ffff16905090565b600080828154811061087b5761087a611443565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106108d4576108d3611443565b5b60200260200101516108e691906114a1565b905060008082815481106108fd576108fc611443565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff0219169083600181111561099157610990610bd5565b5b0217905550600067ffffffffffffffff8111156109b1576109b0610cbd565b5b6040519080825280602002602001820160405280156109df5781602001602082028036833780820191505090505b50600090805190602001906109f5929190610afa565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a2390611503565b60006040518083038185875af1925050503d8060008114610a60576040519150601f19603f3d011682016040523d82523d6000602084013e610a65565b606091505b505090506001151581151514610ab0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa790611564565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b73579160200282015b82811115610b725782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b1a565b5b509050610b809190610b84565b5090565b5b80821115610b9d576000816000905550600101610b85565b5090565b6000819050919050565b610bb481610ba1565b82525050565b6000602082019050610bcf6000830184610bab565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c1557610c14610bd5565b5b50565b6000819050610c2682610c04565b919050565b6000610c3682610c18565b9050919050565b610c4681610c2b565b82525050565b6000602082019050610c616000830184610c3d565b92915050565b6000604051905090565b600080fd5b600080fd5b610c8481610ba1565b8114610c8f57600080fd5b50565b600081359050610ca181610c7b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cf582610cac565b810181811067ffffffffffffffff82111715610d1457610d13610cbd565b5b80604052505050565b6000610d27610c67565b9050610d338282610cec565b919050565b600067ffffffffffffffff821115610d5357610d52610cbd565b5b602082029050602081019050919050565b600080fd5b6000610d7c610d7784610d38565b610d1d565b90508083825260208201905060208402830185811115610d9f57610d9e610d64565b5b835b81811015610dc85780610db48882610c92565b845260208401935050602081019050610da1565b5050509392505050565b600082601f830112610de757610de6610ca7565b5b8135610df7848260208601610d69565b91505092915050565b60008060408385031215610e1757610e16610c71565b5b6000610e2585828601610c92565b925050602083013567ffffffffffffffff811115610e4657610e45610c76565b5b610e5285828601610dd2565b9150509250929050565b600080fd5b60008083601f840112610e7757610e76610ca7565b5b8235905067ffffffffffffffff811115610e9457610e93610e5c565b5b602083019150836001820283011115610eb057610eaf610d64565b5b9250929050565b60008060208385031215610ece57610ecd610c71565b5b600083013567ffffffffffffffff811115610eec57610eeb610c76565b5b610ef885828601610e61565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f2f82610f04565b9050919050565b610f3f81610f24565b82525050565b6000602082019050610f5a6000830184610f36565b92915050565b600080fd5b600067ffffffffffffffff821115610f8057610f7f610cbd565b5b610f8982610cac565b9050602081019050919050565b82818337600083830152505050565b6000610fb8610fb384610f65565b610d1d565b905082815260208101848484011115610fd457610fd3610f60565b5b610fdf848285610f96565b509392505050565b600082601f830112610ffc57610ffb610ca7565b5b813561100c848260208601610fa5565b91505092915050565b60006020828403121561102b5761102a610c71565b5b600082013567ffffffffffffffff81111561104957611048610c76565b5b61105584828501610fe7565b91505092915050565b60008115159050919050565b6110738161105e565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156110b3578082015181840152602081019050611098565b60008484015250505050565b60006110ca82611079565b6110d48185611084565b93506110e4818560208601611095565b6110ed81610cac565b840191505092915050565b600060408201905061110d600083018561106a565b818103602083015261111f81846110bf565b90509392505050565b60006020828403121561113e5761113d610c71565b5b600061114c84828501610c92565b91505092915050565b600060408201905061116a6000830185610f36565b6111776020830184610f36565b9392505050565b600082825260208201905092915050565b7f4e6f7420656e6f75676820455448210000000000000000000000000000000000600082015250565b60006111c5600f8361117e565b91506111d08261118f565b602082019050919050565b600060208201905081810360008301526111f4816111b8565b9050919050565b7f4e6f74206f70656e000000000000000000000000000000000000000000000000600082015250565b600061123160088361117e565b915061123c826111fb565b602082019050919050565b6000602082019050818103600083015261126081611224565b9050919050565b7f55706b656570206e6f74206e6565646564000000000000000000000000000000600082015250565b600061129d60118361117e565b91506112a882611267565b602082019050919050565b600060208201905081810360008301526112cc81611290565b9050919050565b6000819050919050565b6112e6816112d3565b82525050565b600067ffffffffffffffff82169050919050565b611309816112ec565b82525050565b600061ffff82169050919050565b6113268161130f565b82525050565b600063ffffffff82169050919050565b6113458161132c565b82525050565b600060a08201905061136060008301886112dd565b61136d6020830187611300565b61137a604083018661131d565b611387606083018561133c565b611394608083018461133c565b9695505050505050565b6000815190506113ad81610c7b565b92915050565b6000602082840312156113c9576113c8610c71565b5b60006113d78482850161139e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061141a82610ba1565b915061142583610ba1565b925082820390508181111561143d5761143c6113e0565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114ac82610ba1565b91506114b783610ba1565b9250826114c7576114c6611472565b5b828206905092915050565b600081905092915050565b50565b60006114ed6000836114d2565b91506114f8826114dd565b600082019050919050565b600061150e826114e0565b9150819050919050565b7f5472616e73666572204661696c65642100000000000000000000000000000000600082015250565b600061154e60108361117e565b915061155982611518565b602082019050919050565b6000602082019050818103600083015261157d81611541565b905091905056fea26469706673582212205469a24b85fc232522d262f3cbfe88bdbc8754633a4bbf3657b4e8f1ae3be7a864736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4420,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 4439,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4442,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)4415"
      },
      {
        "astId": 4444,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)4415": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}